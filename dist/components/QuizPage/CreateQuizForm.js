import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React from 'react';
import { Plus, Settings } from 'lucide-react';
const CreateQuizForm = ({ topic, difficulty, loading, onTopicChange, onDifficultyChange, onGenerate, onCancel, settings, onSettingsChange }) => {
    const [showAdvanced, setShowAdvanced] = React.useState(false);
    const handleSettingsChange = (newSettings) => {
        if (settings && onSettingsChange) {
            onSettingsChange({ ...settings, ...newSettings });
        }
    };
    const handleQuestionTypeChange = (type, value) => {
        if (settings && onSettingsChange) {
            onSettingsChange({
                ...settings,
                questionTypes: {
                    ...settings.questionTypes,
                    [type]: value
                }
            });
        }
    };
    return (_jsxs("div", { className: "bg-gradient-to-br from-primary-50 via-white to-primary-100 rounded-xl shadow-lg border border-primary-200 p-4 sm:p-6 mb-6 sm:mb-8 relative overflow-hidden", children: [_jsx("div", { className: "absolute inset-0 bg-gradient-to-r from-primary-500/5 to-blue-500/5 pointer-events-none" }), _jsxs("div", { className: "relative", children: [_jsxs("div", { className: "flex items-center mb-4", children: [_jsx("div", { className: "w-10 h-10 bg-gradient-to-br from-primary-500 to-primary-600 rounded-lg flex items-center justify-center mr-3", children: _jsx(Plus, { className: "w-5 h-5 text-white" }) }), _jsx("h2", { className: "text-lg sm:text-xl font-semibold text-gray-900", children: "Generate New Quiz" })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 sm:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Topic" }), _jsx("input", { type: "text", value: topic, onChange: e => onTopicChange(e.target.value), placeholder: "e.g., Mathematics, Physics, History", className: "input-field bg-white/80 backdrop-blur-sm border-primary-200 focus:border-primary-400 focus:ring-primary-200" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Difficulty" }), _jsxs("div", { className: "relative", children: [_jsxs("select", { value: difficulty, onChange: e => onDifficultyChange(e.target.value), className: "input-field appearance-none pr-10 bg-white/80 backdrop-blur-sm border-primary-200 focus:border-primary-400 focus:ring-primary-200", children: [_jsx("option", { value: "easy", children: "Easy" }), _jsx("option", { value: "medium", children: "Medium" }), _jsx("option", { value: "hard", children: "Hard" })] }), _jsx("div", { className: "absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none", children: _jsx("svg", { className: "w-4 h-4 text-gray-400", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: _jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M19 9l-7 7-7-7" }) }) })] })] })] }), settings && onSettingsChange && (_jsxs("div", { children: [_jsxs("button", { type: "button", onClick: () => setShowAdvanced(!showAdvanced), className: "flex items-center text-sm text-primary-600 hover:text-primary-700 font-medium mb-3", children: [_jsx(Settings, { className: "w-4 h-4 mr-1" }), "Advanced Settings", _jsx("svg", { className: `w-4 h-4 ml-1 transition-transform ${showAdvanced ? 'rotate-180' : ''}`, fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: _jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M19 9l-7 7-7-7" }) })] }), showAdvanced && (_jsxs("div", { className: "bg-white/60 backdrop-blur-sm rounded-lg p-4 border border-primary-200 space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 sm:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Number of Questions" }), _jsx("input", { type: "number", min: "3", max: "15", value: settings.numberOfQuestions, onChange: e => handleSettingsChange({ numberOfQuestions: parseInt(e.target.value) || 5 }), className: "input-field bg-white border-gray-300" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Choices per Question" }), _jsx("input", { type: "number", min: "2", max: "6", value: settings.numberOfChoices, onChange: e => handleSettingsChange({ numberOfChoices: parseInt(e.target.value) || 4 }), className: "input-field bg-white border-gray-300" })] })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-3", children: "Question Types" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("label", { className: "flex items-center", children: [_jsx("input", { type: "checkbox", checked: settings.questionTypes.multipleChoice, onChange: e => handleQuestionTypeChange('multipleChoice', e.target.checked), className: "rounded border-gray-300 text-primary-600 focus:ring-primary-500" }), _jsx("span", { className: "ml-2 text-sm text-gray-700", children: "Multiple Choice" })] }), _jsxs("label", { className: "flex items-center", children: [_jsx("input", { type: "checkbox", checked: settings.questionTypes.trueFalse, onChange: e => handleQuestionTypeChange('trueFalse', e.target.checked), className: "rounded border-gray-300 text-primary-600 focus:ring-primary-500" }), _jsx("span", { className: "ml-2 text-sm text-gray-700", children: "True/False" })] }), _jsxs("label", { className: "flex items-center", children: [_jsx("input", { type: "checkbox", checked: settings.questionTypes.openEnded, onChange: e => handleQuestionTypeChange('openEnded', e.target.checked), className: "rounded border-gray-300 text-primary-600 focus:ring-primary-500" }), _jsx("span", { className: "ml-2 text-sm text-gray-700", children: "Open-Ended" })] })] })] })] }))] })), _jsxs("div", { className: "flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4 pt-2", children: [_jsx("button", { onClick: onGenerate, disabled: !topic.trim() || loading, className: "bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white font-medium py-2 px-4 rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2 shadow-lg", children: loading ? (_jsxs(_Fragment, { children: [_jsx("div", { className: "w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" }), _jsx("span", { children: "Generating..." })] })) : (_jsxs(_Fragment, { children: [_jsx(Plus, { className: "w-4 h-4" }), _jsx("span", { children: "Generate Quiz" })] })) }), _jsx("button", { onClick: onCancel, className: "bg-white/80 backdrop-blur-sm hover:bg-white text-gray-700 font-medium py-2 px-4 rounded-lg border border-gray-300 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2", children: "Cancel" })] })] })] })] }));
};
export default CreateQuizForm;
