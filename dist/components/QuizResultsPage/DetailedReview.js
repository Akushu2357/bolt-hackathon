import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { BookOpen, CheckCircle, XCircle, Target, Lightbulb, AlertTriangle, Brain } from 'lucide-react';
import { QuizScoringService } from '../../services/quizScoringService';
export default function DetailedReview({ quizQuestions, selectedAnswers, isAnswerCorrect, expandedQuestion, setExpandedQuestion, gradingResults }) {
    const getGradingResult = (questionIndex) => {
        if (!gradingResults)
            return undefined;
        // For open-ended questions, we need to match by position in the grading results array
        // since grading results are returned in the same order as the questions were sent
        const openEndedQuestions = quizQuestions
            .map((q, index) => ({ question: q, index }))
            .filter(item => item.question.type === 'open_ended');
        const currentQuestionOpenEndedIndex = openEndedQuestions.findIndex(item => item.index === questionIndex);
        if (currentQuestionOpenEndedIndex >= 0 && currentQuestionOpenEndedIndex < gradingResults.length) {
            return gradingResults[currentQuestionOpenEndedIndex];
        }
        return undefined;
    };
    const getGradeColor = (grade) => {
        switch (grade) {
            case 'correct': return 'text-green-600 bg-green-100';
            case 'partial': return 'text-yellow-600 bg-yellow-100';
            case 'incorrect': return 'text-red-600 bg-red-100';
            default: return 'text-gray-600 bg-gray-100';
        }
    };
    return (_jsxs("div", { className: "card", children: [_jsxs("div", { className: "flex items-center mb-6", children: [_jsx(BookOpen, { className: "w-6 h-6 text-gray-700 mr-3" }), _jsx("h2", { className: "text-xl font-semibold text-gray-900", children: "Detailed Review" })] }), _jsx("div", { className: "space-y-6", children: quizQuestions.map((question, index) => {
                    const isCorrect = isAnswerCorrect(index);
                    const userAnswer = selectedAnswers[index];
                    const isExpanded = expandedQuestion === index;
                    const feedback = QuizScoringService.getAnswerFeedback(question, userAnswer, gradingResults);
                    const gradingResult = getGradingResult(index);
                    return (_jsxs("div", { className: "border border-gray-200 rounded-lg overflow-hidden", children: [_jsx("div", { className: `p-4 sm:p-6 cursor-pointer transition-colors duration-200 ${isCorrect ? 'bg-green-50 hover:bg-green-100' : 'bg-red-50 hover:bg-red-100'}`, onClick: () => setExpandedQuestion(isExpanded ? null : index), children: _jsxs("div", { className: "flex items-start justify-between", children: [_jsxs("div", { className: "flex-1 min-w-0", children: [_jsxs("div", { className: "flex items-center mb-2 flex-wrap gap-2", children: [_jsxs("span", { className: "text-sm font-medium text-gray-500 mr-3", children: ["Question ", index + 1] }), _jsxs("div", { className: `flex items-center ${isCorrect ? 'text-green-600' : 'text-red-600'}`, children: [isCorrect ? (_jsx(CheckCircle, { className: "w-4 h-4 mr-1" })) : (_jsx(XCircle, { className: "w-4 h-4 mr-1" })), _jsx("span", { className: "text-sm font-medium", children: isCorrect ? 'Correct' : 'Incorrect' })] }), gradingResult && (_jsxs("span", { className: `text-xs px-2 py-1 rounded-full font-medium ${getGradeColor(gradingResult.grade)}`, children: ["AI: ", gradingResult.grade, " (", Math.round(gradingResult.score * 100), "%)"] })), feedback.score !== undefined && (_jsxs("span", { className: "text-sm ml-2 px-2 py-1 bg-gray-100 rounded", children: ["Score: ", Math.round(feedback.score * 100), "%"] }))] }), _jsx("h3", { className: "text-lg font-medium text-gray-900 mb-2", children: question.question })] }), _jsx("div", { className: "ml-4", children: _jsx("div", { className: `w-8 h-8 rounded-full flex items-center justify-center ${isCorrect ? 'bg-green-100' : 'bg-red-100'}`, children: isCorrect ? (_jsx(CheckCircle, { className: "w-5 h-5 text-green-600" })) : (_jsx(XCircle, { className: "w-5 h-5 text-red-600" })) }) })] }) }), isExpanded && (_jsxs("div", { className: "border-t border-gray-200 p-4 sm:p-6 bg-white", children: [question.options && (_jsxs("div", { className: "mb-4", children: [_jsx("h4", { className: "font-medium text-gray-900 mb-3", children: "Answer Options:" }), _jsx("div", { className: "space-y-2", children: question.options.map((option, optionIndex) => {
                                                    const isUserSelected = Array.isArray(userAnswer) && userAnswer.includes(optionIndex);
                                                    const isCorrectOption = Array.isArray(question.correct_answer) &&
                                                        question.correct_answer.includes(optionIndex);
                                                    return (_jsx("div", { className: `p-3 rounded-lg border-2 ${isCorrectOption && isUserSelected
                                                            ? 'border-green-500 bg-green-50'
                                                            : isCorrectOption
                                                                ? 'border-green-500 bg-green-50'
                                                                : isUserSelected
                                                                    ? 'border-red-500 bg-red-50'
                                                                    : 'border-gray-200 bg-gray-50'}`, children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-gray-900", children: option }), _jsxs("div", { className: "flex items-center space-x-2", children: [isUserSelected && (_jsx("span", { className: "text-xs px-2 py-1 bg-blue-100 text-blue-700 rounded", children: "Your Answer" })), isCorrectOption && (_jsx("span", { className: "text-xs px-2 py-1 bg-green-100 text-green-700 rounded", children: "Correct" }))] })] }) }, optionIndex));
                                                }) })] })), question.type === 'true_false' && (_jsxs("div", { className: "mb-4", children: [_jsx("h4", { className: "font-medium text-gray-900 mb-2", children: "Your Answer:" }), _jsx("div", { className: "p-3 bg-gray-50 rounded-lg border", children: _jsx("p", { className: "text-gray-800", children: typeof userAnswer === 'boolean' ? (userAnswer ? 'True' : 'False') : 'No answer provided' }) }), _jsx("h4", { className: "font-medium text-gray-900 mb-2 mt-3", children: "Correct Answer:" }), _jsx("div", { className: "p-3 bg-green-50 rounded-lg border border-green-200", children: _jsx("p", { className: "text-green-800", children: typeof question.correct_answer === 'boolean' ?
                                                        (question.correct_answer ? 'True' : 'False') :
                                                        String(question.correct_answer) }) })] })), question.type === 'open_ended' && (_jsxs("div", { className: "mb-4", children: [_jsx("h4", { className: "font-medium text-gray-900 mb-2", children: "Your Answer:" }), _jsx("div", { className: "p-3 bg-gray-50 rounded-lg border", children: _jsx("p", { className: "text-gray-800", children: typeof userAnswer === 'string' ? userAnswer : 'No answer provided' }) }), gradingResult && (_jsxs("div", { className: "mt-4 space-y-3", children: [_jsxs("div", { className: "bg-blue-50 border border-blue-200 rounded-lg p-4", children: [_jsxs("h5", { className: "font-medium text-blue-900 mb-2 flex items-center", children: [_jsx(Brain, { className: "w-4 h-4 mr-1" }), "AI Feedback:"] }), _jsx("p", { className: "text-blue-800 text-sm leading-relaxed", children: gradingResult.feedback })] }), gradingResult.improvements && gradingResult.improvements.length > 0 && (_jsxs("div", { className: "bg-orange-50 border border-orange-200 rounded-lg p-4", children: [_jsxs("h5", { className: "font-medium text-orange-900 mb-2 flex items-center", children: [_jsx(Lightbulb, { className: "w-4 h-4 mr-1" }), "Suggestions for Improvement:"] }), _jsx("ul", { className: "space-y-1", children: gradingResult.improvements.map((improvement, idx) => (_jsxs("li", { className: "text-sm text-orange-700 flex items-start", children: [_jsx("span", { className: "text-orange-500 mr-2", children: "\u2022" }), improvement] }, idx))) })] })), gradingResult.weakAreas && gradingResult.weakAreas.length > 0 && (_jsxs("div", { className: "bg-red-50 border border-red-200 rounded-lg p-4", children: [_jsxs("h5", { className: "font-medium text-red-900 mb-2 flex items-center", children: [_jsx(AlertTriangle, { className: "w-4 h-4 mr-1" }), "Areas to Focus On:"] }), _jsx("div", { className: "flex flex-wrap gap-2", children: gradingResult.weakAreas.map((area, idx) => (_jsx("span", { className: "text-xs px-2 py-1 bg-red-100 text-red-700 rounded-full", children: area }, idx))) })] }))] })), typeof question.correct_answer === 'string' && (_jsxs(_Fragment, { children: [_jsx("h4", { className: "font-medium text-gray-900 mb-2 mt-4", children: "Model Answer:" }), _jsx("div", { className: "p-3 bg-green-50 rounded-lg border border-green-200", children: _jsx("p", { className: "text-green-800 text-sm", children: question.correct_answer }) })] }))] })), question.type !== 'open_ended' && (_jsxs("div", { className: "bg-gradient-to-br from-blue-50 via-white to-indigo-50 border border-blue-200 rounded-lg p-4 relative overflow-hidden", children: [_jsx("div", { className: "absolute inset-0 bg-gradient-to-r from-blue-500/5 to-indigo-500/5 pointer-events-none" }), _jsxs("div", { className: "relative flex items-start", children: [_jsx("div", { className: "w-8 h-8 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center mr-3 flex-shrink-0", children: _jsx(Target, { className: "w-4 h-4 text-white" }) }), _jsxs("div", { children: [_jsx("h4", { className: "font-medium text-blue-900 mb-2", children: "General Explanation:" }), _jsx("p", { className: "text-blue-800 text-sm leading-relaxed", children: feedback.explanation })] })] })] }))] }))] }, `${question.id}-${index}`));
                }) })] }));
}
